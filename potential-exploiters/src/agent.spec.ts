import { HandleTransaction } from "forta-agent";
import { provideTransactionHandler } from "./agent";
import {
  createAddress,
  encodeParameter,
  encodeParameters,
  TestTransactionEvent,
} from "forta-agent-tools";
import { createFinding } from "./utils";

const TORNADO_TEST_ADDRESSES = [createAddress("0x1")];

const BYTES32_ZERO =
  "0x0000000000000000000000000000000000000000000000000000000000000000";

const withdrawalEventAbi = "Withdrawal(address,bytes32,address,uint256)";

describe("Potential Exploiter Test Suite", () => {
  let handleTransaction: HandleTransaction;

  beforeEach(() => {
    handleTransaction = provideTransactionHandler(TORNADO_TEST_ADDRESSES);
  });

  it("should return empty findings if no contract was deployed", async () => {
    const txEvent = new TestTransactionEvent();

    const findings = await handleTransaction(txEvent);

    expect(findings).toStrictEqual([]);
  });

  it("should return no findings if the contract was deployed by a no suspect addresss", async () => {
    const txEvent = new TestTransactionEvent().addTraces({
      from: createAddress("0x12"),
    });
    txEvent.traces[0].type = "create"; // forta-agent-tools doesn't support changing trace type yet.

    const findings = await handleTransaction(txEvent);

    expect(findings).toStrictEqual([]);
  });

  it("should mark as suspect only address target from tornado withdrawals", async () => {
    const txEvent = new TestTransactionEvent()
      .addEventLog(
        withdrawalEventAbi,
        TORNADO_TEST_ADDRESSES[0],
        encodeParameters(
          ["address", "bytes32", "uint256"],
          [createAddress("0x11"), BYTES32_ZERO, 12]
        ),
        encodeParameter("address", createAddress("0x0"))
      )
      .addTraces({ from: createAddress("0x12") });
    txEvent.traces[0].type = "create"; // forta-agent-tools doesn't support changing trace type yet.
    txEvent.traces[0].result["address"] = createAddress("0xc0de");

    const findings = await handleTransaction(txEvent);

    expect(findings).toStrictEqual([]);
  });

  it("should mark as suspect only addresses when the withdrawal event is emmited from a tornado address", async () => {
    const txEvent = new TestTransactionEvent()
      .addEventLog(
        withdrawalEventAbi,
        createAddress("0x3"),
        encodeParameters(
          ["address", "bytes32", "uint256"],
          [createAddress("0x12"), BYTES32_ZERO, 12]
        ),
        encodeParameter("address", createAddress("0x0"))
      )
      .addTraces({ from: createAddress("0x12") });
    txEvent.traces[0].type = "create"; // forta-agent-tools doesn't support changing trace type yet.
    txEvent.traces[0].result["address"] = createAddress("0xc0de");

    const findings = await handleTransaction(txEvent);

    expect(findings).toStrictEqual([]);
  });

  it("should return a finding when a contrat is deployed from an address funded from tornado", async () => {
    const txEvent = new TestTransactionEvent()
      .addEventLog(
        withdrawalEventAbi,
        TORNADO_TEST_ADDRESSES[0],
        encodeParameters(
          ["address", "bytes32", "uint256"],
          [createAddress("0x12"), BYTES32_ZERO, 12]
        ),
        encodeParameter("address", createAddress("0x12"))
      )
      .addTraces({ from: createAddress("0x12") });
    txEvent.traces[0].type = "create"; // forta-agent-tools doesn't support changing trace type yet.
    txEvent.traces[0].result["address"] = createAddress("0xc0de");

    const findings = await handleTransaction(txEvent);

    expect(findings).toStrictEqual([createFinding(createAddress("0x12"), createAddress("0xc0de"))]);
  });
});
