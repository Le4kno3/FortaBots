import { Finding, HandleTransaction, TransactionEvent } from "forta-agent";
import { createFinding } from "./utils";
import Storage from "lru-cache";

const TORNADO_ADDRESSES = [
  "0x12d66f87a04a9e220743712ce6d9bb1b5616b8fc", // Tornado Cash: 0.1 ETH
  "0x47ce0c6ed5b0ce3d3a51fdb1c52dc66a7c3c2936", // Tornado Cash: 1 ETH
  "0x910Cbd523D972eb0a6f4cAe4618aD62622b39DbF", // Tornado Cash: 10 ETH
  "0xa160cdab225685da1d56aa342ad8841c3b53f291", // Tornado Cash: 100 ETH
];

const WITHDRAWAL_EVENT_ABI =
  "event Withdrawal(address to, bytes32 nullifierHash, address indexed relayer, uint256 fee)";

export const provideTransactionHandler = (
  tornadoAddresses: string[]
): HandleTransaction => {
  const tornadoFundedAddresses: Storage<string, boolean> = new Storage({ max: 1000000 })

  return async (txEvent: TransactionEvent): Promise<Finding[]> => {
    const findings: Finding[] = [];

    const tornadoWithdrawalsEvents = tornadoAddresses
      .map((tornadoAddress: string) =>
        txEvent.filterLog(WITHDRAWAL_EVENT_ABI, tornadoAddress)
      )
      .flat();

    tornadoWithdrawalsEvents.forEach((tornadoWithdrawal) => {
      tornadoFundedAddresses.set(tornadoWithdrawal.args["to"].toLowerCase(), true);
    });

    for (let trace of txEvent.traces) {
      if (
        trace.type === "create" &&
        tornadoFundedAddresses.get(trace.action.from)
      ) {
        findings.push(createFinding(trace.action.from, trace.result.address));
      }
    }

    return findings;
  };
};

export default {
  handleTransaction: provideTransactionHandler(TORNADO_ADDRESSES),
};
